// <auto-generated />
using System;
using Assg.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assg.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241229071645_ChatQuestion2")]
    partial class ChatQuestion2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assg.Models.StudentModels.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<string>("ChapterContentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChapterContentId")
                        .HasColumnType("int");

                    b.Property<string>("ChapterContentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ChapterContentPrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsInCart")
                        .HasColumnType("bit");

                    b.Property<double>("Subtotal")
                        .HasColumnType("float");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("ChapterContentId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubcategoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubcategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Chapter");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.ChapterContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("courseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("ChapterContent");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.ChatAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("ChatAnswer");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.ChatQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterContentId")
                        .HasColumnType("int");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChapterContentId");

                    b.HasIndex("CourseId");

                    b.ToTable("ChatQuestion");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Participant")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("categoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("categoryId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("CVV")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CardExpiredDate")
                        .HasColumnType("date");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ChapterContentId")
                        .HasColumnType("int");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("CartId");

                    b.HasIndex("ChapterContentId");

                    b.HasIndex("CourseId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Options")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("quizId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("quizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.QuizAnswer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("quizId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("score")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("quizId");

                    b.ToTable("QuizAnswer");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.QuizQuestion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ChapterContentId")
                        .HasColumnType("int");

                    b.Property<string>("courseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterContentId");

                    b.HasIndex("courseId");

                    b.ToTable("QuizQuestion");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("ChapterContentId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReviewRate")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("ChapterContentId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Cart", b =>
                {
                    b.HasOne("Assg.Models.StudentModels.ChapterContent", "ChapterContent")
                        .WithMany("Carts")
                        .HasForeignKey("ChapterContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assg.Models.StudentModels.UserAccount", "Account")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ChapterContent");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Chapter", b =>
                {
                    b.HasOne("Assg.Models.StudentModels.Course", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.ChapterContent", b =>
                {
                    b.HasOne("Assg.Models.StudentModels.Chapter", "Chapter")
                        .WithMany("ChapterContents")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.ChatAnswer", b =>
                {
                    b.HasOne("Assg.Models.StudentModels.ChatQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assg.Models.StudentModels.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId");

                    b.Navigation("Question");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.ChatQuestion", b =>
                {
                    b.HasOne("Assg.Models.StudentModels.ChapterContent", "ChapterContent")
                        .WithMany("ChatQuestion")
                        .HasForeignKey("ChapterContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assg.Models.StudentModels.Course", "Course")
                        .WithMany("ChatQuestions")
                        .HasForeignKey("CourseId");

                    b.Navigation("ChapterContent");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Course", b =>
                {
                    b.HasOne("Assg.Models.StudentModels.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("categoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Payment", b =>
                {
                    b.HasOne("Assg.Models.StudentModels.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId");

                    b.HasOne("Assg.Models.StudentModels.ChapterContent", "ChapterContent")
                        .WithMany()
                        .HasForeignKey("ChapterContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assg.Models.StudentModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.Navigation("Cart");

                    b.Navigation("ChapterContent");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Questions", b =>
                {
                    b.HasOne("Assg.Models.StudentModels.QuizQuestion", "quizQuestion")
                        .WithMany("questions")
                        .HasForeignKey("quizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("quizQuestion");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.QuizAnswer", b =>
                {
                    b.HasOne("Assg.Models.StudentModels.QuizQuestion", "question")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("quizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("question");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.QuizQuestion", b =>
                {
                    b.HasOne("Assg.Models.StudentModels.ChapterContent", "ChapterContent")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("ChapterContentId");

                    b.HasOne("Assg.Models.StudentModels.Course", "course")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ChapterContent");

                    b.Navigation("course");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Review", b =>
                {
                    b.HasOne("Assg.Models.StudentModels.ChapterContent", "ChapterContent")
                        .WithMany("Reviews")
                        .HasForeignKey("ChapterContentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Assg.Models.StudentModels.Payment", "Payment")
                        .WithMany("Reviews")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChapterContent");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Chapter", b =>
                {
                    b.Navigation("ChapterContents");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.ChapterContent", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("ChatQuestion");

                    b.Navigation("QuizQuestions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.ChatQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Course", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("ChatQuestions");

                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.Payment", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Assg.Models.StudentModels.QuizQuestion", b =>
                {
                    b.Navigation("QuizAnswers");

                    b.Navigation("questions");
                });
#pragma warning restore 612, 618
        }
    }
}
